public class Solution {//xqu
    public boolean isValidSudoku(char[][] board) {
        if(board == null) return false;
        if(board.length != 9 || board[0].length != 9) return false;
        if(isRowValid(board) && isColumnValid(board) && isBlockValid(board))
            return true;
        else 
            return false;
    }
    private boolean isRowValid(char[][] board){
        for(int i=0;i<9;i++){
            Map<Character,Integer> row = new HashMap<Character,Integer>();
            for(int j=0;j<9;j++){
                if(board[i][j] != '.' && row.containsKey(board[i][j]))
                    return false;
                else
                    row.put(board[i][j],1);
            }
        }
        return true;
    }
    private boolean isColumnValid(char[][] board){
        for(int i=0;i<9;i++){
            Map<Character,Integer> column = new HashMap<Character,Integer>();
            for(int j=0;j<9;j++){
                if(board[j][i] != '.' && column.containsKey(board[j][i]))
                    return false;
                else
                    column.put(board[j][i],1);
            }
        }
        return true;       
    }
    private boolean isBlockValid(char[][] board){
        for(int i=0;i<9;i++){
            Map<Character,Integer> block = new HashMap<Character,Integer>();
            for(int j=0;j<9;j++){
                if(board[i/3*3+j/3][i%3*3+j%3] != '.' && block.containsKey(board[i/3*3+j/3][i%3*3+j%3]))
                    return false;
                else
                    block.put(board[i/3*3+j/3][i%3*3+j%3],1);
            }
        }
        return true;             
    }
}
