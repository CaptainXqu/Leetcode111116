//Case 1: Sorted it first, then used a new array to get the third maximum number.

public class Solution {
    public int thirdMax(int[] nums) {
        int[] interval = new int[3];
        Arrays.sort(nums);
        for(int i=0;i<3;i++){
            interval[i] = nums[0];
        }
        if(nums.length == 1)
            return nums[0];
        else if(nums.length == 2)
            return nums[1];
        else{
            int count = 0;
            for(int i = nums.length-1;i>=0;i--){
                if(i==nums.length-1){
                     interval[2]=nums[i];
                     count = 1;
                }else if(nums[i] != nums[i+1] && count == 1){
                    interval[1]=nums[i];
                    count = 2;
                }else if(nums[i] != nums[i+1] && count == 2){
                    interval[0]=nums[i];
                    count = 0;
                }
            }
            
            if(interval[0]!=interval[1] && interval[0]!=interval[2] && interval[2]!=interval[1] )
                return interval[0];
            else 
                return interval[2];
        }
        
        
        
    }
}

//Case 2: Used hashset to handle duplicated elements.

public class Solution {
    public int thirdMax(int[] nums) {
        Arrays.sort(nums);
        int count = 0;
        int first = 0;
        if(nums.length == 1)
            return nums[0];
        else if(nums.length == 2)
            return nums[1];
        else{
            Set<Integer> set = new HashSet<Integer>();
            for(int i=nums.length-1;i>=0;i--){
                if(!set.contains(nums[i])){
                    set.add(nums[i]);
                    count++;
                }
                if(count == 1)
                    first = nums[i];
                if(count == 3)
                    return nums[i];
            }
        }
        return first;
    }
}
