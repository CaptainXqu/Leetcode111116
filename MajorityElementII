/*
Sorted first. T(n)=O(nlogn)
*/
public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        Arrays.sort(nums);
        List<Integer> result = new ArrayList<Integer>();
        for(int i=0;i<nums.length;i++){
            int j = i;
            int count = 1;
            while(j+1 < nums.length && nums[j+1] == nums[i]){
                count++;
                j++;
            }
            if(count > nums.length/3){
                result.add(nums[i]);
                i = j;
            }
        }
        return result;
    }
}

/*
By using Moore majority vote algorithm, n/2 has one number, n/3 has two numbers.
*/
public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> result = new ArrayList<Integer>();
        if(nums.length == 1){
            result.add(nums[0]);
            return result;
        }
        int majority1 = 0;
        int majority2 = 0;
        int count1 = 0;
        int count2 = 0;
        
        for(int num:nums){
            if(majority1 == num){
                count1++;
            }else if(majority2 == num){
                count2++;
            }else if(count1 == 0){
                majority1 = num;
                count1++;
            }else if(count2 == 0){
                majority2 = num;
                count2++;
            }else{
                count1--;
                count2--;
            }
        }
        count1 = 0;
        count2 = 0;
        for(int num:nums){
            if(num == majority1){
                count1++;
            }
            if(num == majority2){
                count2++;
            }
        }
        if(majority1 == majority2){//if array contains only one element, then I have to compare the two majority.
            if(count1>nums.length/3 || count2 > nums.length/3)
                result.add(majority1);
        }else{
            if(count1 > nums.length/3)
                result.add(majority1);
            if(count2 > nums.length/3)
                result.add(majority2);
        }
        return result;
    }
}
